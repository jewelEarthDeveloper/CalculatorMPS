package khonraad.mps.tutorial.calculator.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.EmptyScope;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class InputFieldReference_Constraints extends BaseConstraintsDescriptor {
  public InputFieldReference_Constraints() {
    super(CONCEPTS.InputFieldReference$Il);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.field$SrJF, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_43tbk9_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            Scope scope = Scope.getScope(_context.getContextNode(), _context.getContainmentLink(), _context.getPosition(), CONCEPTS.InputField$b$);
            return (scope == null ? new EmptyScope() : scope);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_43tbk9_a0a0a0a0a1a0a0a0c = new SNodePointer("r:9357bc0e-5155-4473-b157-03ec7d654ae4(khonraad.mps.tutorial.calculator.constraints)", "5710321375581139995");

  private static final class CONCEPTS {
    /*package*/ static final SConcept InputFieldReference$Il = MetaAdapterFactory.getConcept(0xa943d876fd5b46bbL, 0x8e131fe5df4f494eL, 0x5e74bdeab8fcbdb5L, "khonraad.mps.tutorial.calculator.structure.InputFieldReference");
    /*package*/ static final SConcept InputField$b$ = MetaAdapterFactory.getConcept(0xa943d876fd5b46bbL, 0x8e131fe5df4f494eL, 0x5e74bdeab8fae2acL, "khonraad.mps.tutorial.calculator.structure.InputField");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink field$SrJF = MetaAdapterFactory.getReferenceLink(0xa943d876fd5b46bbL, 0x8e131fe5df4f494eL, 0x5e74bdeab8fcbdb5L, 0x5e74bdeab8fcbdb6L, "field");
  }
}
